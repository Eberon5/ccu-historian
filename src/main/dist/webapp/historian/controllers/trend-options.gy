import mdz.ccuhistorian.TrendDesign

utils.catchToLog(request.getAttribute('log')) {
	def options=new TrendOptions()
	
	def dataPoints=request.getAttribute('dataPoints')
	if (dataPoints==null)
		throw new Exception('No data points selected (include datapoints.gy first)')
	
	// Höhe und Breite der Trend-Grafik
	try {
		options.width=(params.w?:'640') as Integer
		options.height=(params.h?:'260') as Integer
	} catch (NumberFormatException e) {
		throw new Exception('Page parameter w (width) or h (height) is invalid')
	}

	// Datenpunkt-Gruppen
	def groupIds
	if (!params.g)
		groupIds=[1]*dataPoints.size()
	else {
		try {
			if (params.g instanceof String)
				groupIds=[params.g as Integer]
			else
				groupIds=params.g.collect { it as Integer }
		} catch (NumberFormatException e) {
			throw new Exception('Page parameter g (data point group/s) is invalid (not a number)')
		}
	}
	while (groupIds.size()<dataPoints.size()) groupIds << 1
	Map<Integer /* Gruppen-ID */, TrendGroup> sortedGroups=new TreeMap<>().withDefault { new TrendGroup(height: 1) }
	[dataPoints, groupIds].transpose().each { dp, groupId ->
		sortedGroups[groupId].dataPoints << dp
	}
	options.groups=sortedGroups.values() as List
	
	// Gruppenhöhen
	def groupHeights
	if (!params.gh)
		groupHeights=[1]*groupIds.unique().size()
	else {
		try {
			if (params.gh instanceof String)
				groupHeights=[params.gh as Integer]
			else
				groupHeights=params.gh.collect { it as Integer }
		} catch (NumberFormatException e) {
			throw new Exception('Page parameter gh (group height/s) is invalid (not a number)')
		}
	}
	[options.groups, groupHeights].transpose().each { group, height ->
		group.height=height
	}
	
	// Trend-Design
	if (params.t && params.t!='default') {
		if (!binding.webServer.config.trendDesigns.containsKey(params.t))
			throw new Exception("Page parameter t (trend design) is invalid")
		options.trendDesign=binding.webServer.config.trendDesigns[params.t]
	} else options.trendDesign=binding.webServer.config.trendDesigns['default']
	
	request.setAttribute('trendOptions', options)
}
