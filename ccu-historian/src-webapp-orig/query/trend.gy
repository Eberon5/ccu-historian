import groovy.time.TimeCategory
import groovy.transform.Field
import groovy.transform.CompileStatic
import org.jfree.chart.JFreeChart
import org.jfree.chart.ChartColor
import org.jfree.data.xy.XYSeries
import org.jfree.data.xy.XYSeriesCollection
import org.jfree.chart.axis.DateAxis
import org.jfree.chart.axis.NumberAxis
import org.jfree.chart.encoders.ImageEncoderFactory
import org.jfree.chart.renderer.xy.XYStepRenderer
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer
import org.jfree.chart.plot.XYPlot
import org.jfree.chart.plot.CombinedDomainXYPlot
import org.jfree.chart.plot.PlotOrientation
import mdz.hc.TimeSeries
import mdz.hc.DataPoint
import mdz.ccuhistorian.LogSystem
import mdz.ccuhistorian.TrendDesign
import mdz.ccuhistorian.Database
import java.util.logging.Logger

@Field
private final static log=Logger.getLogger('mdz.ccuhistorian.webapp.Trend')

// helpers

def applyDesign(obj, cl) {
	if (cl) {
		try { synchronized(cl) {
			cl.delegate=obj
			cl.resolveStrategy=Closure.DELEGATE_ONLY
			cl()
		}	} catch (Exception e) {
			throw new Exception('Configuration option webServer.trendDesigns is invalid', e)
} 	}	}

def applyDesign(obj, cls, idx) {
	if (cls) {
		def cl;	try {
			cl=cls[idx%cls.size()]
		} catch (Exception e) {
			throw new Exception('Configuration option webServer.trendDesigns is invalid', e)
		}
		applyDesign obj, cl
}	}

@CompileStatic
static addToXYSeries(TimeSeries timeSeries, XYSeries xySeries) {
	if (!timeSeries.isNumeric())
		throw new IllegalStateException("Type of time series is not numeric");
	final long[] timestamps=timeSeries.timestamps
	final double[] values=(double[])timeSeries.values
	final int size=timeSeries.size
	for (int idx = 0; idx < size; ++idx)
		xySeries.add(timestamps[idx], values[idx]);
}

// class for storage of the URL parameters

class Parameters {

	static class Group {
		int height=1
		List<DataPoint> dataPoints=new ArrayList<DataPoint>()
		@Override
		String toString() {
			"(height: $height, dataPoints: $dataPoints.displayName)"
		}
	}

	int width, height
	Date begin, end
	TrendDesign trendDesign
	Map<Integer /* group id */, Group> groups=new TreeMap<>().withDefault { new Group() }

	Parameters(params, binding) {
		// height and width of the graphics
		try {
			width=(params.w?:'640') as Integer
			height=(params.h?:'260') as Integer
		} catch (NumberFormatException e) {
			throw new Exception('Page parameter w (width) or h (height) is invalid')
		}
		
		// datapoint IDs
		if (!params.i)
			throw new Exception('Page parameter i (data point id/s) not set')
		def dataPoints=binding.utils.parseDataPointList(params.i, binding.database)
	
		// data point groups
		def dpGroups
		if (!params.g)
			dpGroups=[0]*dataPoints.size()
		else {
			try {
				if (params.g instanceof String)
					dpGroups=[params.g as Integer]
				else
					dpGroups=params.g.collect { it as Integer }
			} catch (NumberFormatException e) {
				throw new Exception('Page parameter g (data point group/s) is invalid (not a number)')
			}
		}
		if (dataPoints.size()!=dpGroups.size())
			throw new Exception('Page parameter g (data point group/s) is invalid (wrong count)')

		// build groups
		[dataPoints, dpGroups].transpose().each {
			def (dp, group)=it
			groups[group].dataPoints << dp
		}

		// group heights
		def groupHeights
		if (!params.gh)
			groupHeights=[1]*dpGroups.unique().size()
		else {
			try {
				if (params.gh instanceof String)
					groupHeights=[params.gh as Integer]
				else
					groupHeights=params.gh.collect { it as Integer }
			} catch (NumberFormatException e) {
				throw new Exception('Page parameter gh (group height/s) is invalid (not a number)')
			}
		}
		if (groups.size()!=groupHeights.size())
			throw new Exception('Page parameter gh (group height/s) is invalid (wrong count)')

		[groups.values().asList(), groupHeights].transpose().each {
			def (group, height)=it
			group.height=height
		}

		// time range	
		begin=binding.utils.parseDate(params.b)
		end=binding.utils.parseDate(params.e)
		def duration=binding.utils.parseDuration(params.d)
		use (TimeCategory) {
			if (!begin) {
				if (!end) end=new Date()
				if (!duration) begin=end-1
				else begin=end-duration
			} else {
				if (!end) {
					if (!duration) end=new Date()
					else end=begin+duration
		}	}	}
		
		// trend design
		if (params.t && params.t!='default') {
			trendDesign=binding.webServer.config.trendDesigns[params.t]
			if (!trendDesign)
				throw new Exception("Page parameter t (trend design) is invalid")
		} else trendDesign=binding.webServer.config.trendDesigns['default']?:new TrendDesign()
	}
	
	@Override
	String toString() {
		"width: $width, height: $height, groups: $groups, begin: $begin, end: $end"
	}
}

// generate chart

class PlotState {
	int totalDataPointIdx=0
	int totalAxisIdx=0
}

def createPlot(parameters, dataPoints, plotState) {
	// generate plot
	def plot=new XYPlot()
	plot.backgroundPaint=new ChartColor(245, 245, 245)
	applyDesign plot, parameters.trendDesign.plot
	
	// y-axis
	// data points with same range and unit should use the same y-axis.
	def rangeAxes=[:]
	def rangeAxesDisplayIdx=[]
	def visibleRangeAxesCnt=0
	
	// create time series and y-axis
	dataPoints.eachWithIndex { dataPoint, dpIdx ->
		
		if (dataPoint.historyString)
			throw new Exception("Data point $dataPoint.displayName is not numeric")
		def displayName=dataPoint.id.interfaceId+'.'+(dataPoint.attributes.displayName?:dataPoint.id.address)+'.'+
			dataPoint.id.identifier
		def isAction=dataPoint.attributes.type=='ACTION'
	
		// create/select y-axis
		def axisKey=[dataPoint.attributes.type, dataPoint.attributes.unit, dataPoint.attributes.minimum, dataPoint.attributes.maximum]
		def axisIdx=rangeAxes[axisKey]
		if (axisIdx==null) {
			axisIdx=rangeAxes.size()
			def numberAxis=new NumberAxis(dataPoint.attributes.unit)
			numberAxis.autoRangeIncludesZero=false
			numberAxis.autoRangeStickyZero=false
			numberAxis.upperMargin=0.02
			numberAxis.lowerMargin=0.02
			if (isAction) {
				numberAxis.visible=false
				rangeAxesDisplayIdx << 0
			} else {
				visibleRangeAxesCnt++
				rangeAxesDisplayIdx << visibleRangeAxesCnt
			}
			applyDesign numberAxis, parameters.trendDesign.rangeAxes, plotState.totalAxisIdx
			plot.setRangeAxis(axisIdx, numberAxis)
			rangeAxes[axisKey]=axisIdx
			plotState.totalAxisIdx++
		}
			
		// request time series and convert
		def timeSeries
		if (isAction) timeSeries=database.getTimeSeriesRaw(dataPoint, parameters.begin, parameters.end)
		else timeSeries=database.getTimeSeries(dataPoint, parameters.begin, parameters.end)
		def dispIdx=rangeAxesDisplayIdx[axisIdx]
		XYSeries xySeries=new XYSeries(displayName+(dispIdx>0?' ('+dispIdx+')':''))
		addToXYSeries(timeSeries, xySeries)
		applyDesign xySeries, parameters.trendDesign.series, plotState.totalDataPointIdx
		def xySeriesCollection=new XYSeriesCollection(xySeries)
		plot.setDataset(dpIdx, xySeriesCollection)
		
		// y-axis
		plot.mapDatasetToRangeAxis(dpIdx, axisIdx)
	
		// create renderer
		def renderer
		if (isAction) {
			renderer=new XYLineAndShapeRenderer()
			renderer.baseShapesVisible=true
			renderer.baseLinesVisible=false
		} else renderer=new XYStepRenderer()
		renderer.paint=TrendDesign.getDefaultColor(plotState.totalDataPointIdx)
		applyDesign renderer, parameters.trendDesign.renderers, plotState.totalDataPointIdx
		plot.setRenderer(dpIdx, renderer)
		
		plotState.totalDataPointIdx++
	}
	plot
}

def createCombinedPlot(parameters) {
	// time axis
	def timeAxis = new DateAxis()
	timeAxis.lowerMargin=0.00 // keine Raender
	timeAxis.upperMargin=0.00
	timeAxis.setRange(parameters.begin, parameters.end)
	applyDesign timeAxis, parameters.trendDesign.timeAxis

	// create combined plot
	def combinedPlot=new CombinedDomainXYPlot(timeAxis)
	combinedPlot.setGap(10.0);
	combinedPlot.setOrientation(PlotOrientation.VERTICAL);
	
	// create subplots
	PlotState plotState=[]
	parameters.groups.values().each { group ->
		combinedPlot.add(createPlot(parameters, group.dataPoints, plotState), group.height)
	}
	combinedPlot
}

def createChart(parameters) {
	// create chart
	def chart=new JFreeChart(null, JFreeChart.DEFAULT_TITLE_FONT, createCombinedPlot(parameters), true)
	chart.backgroundPaint=ChartColor.WHITE
	applyDesign chart, parameters.trendDesign.chart
	chart
}

// main function

utils.catchToLog(log) {
	def startTime=System.currentTimeMillis()
	log.finer 'Web server: Generating trend'
	
	// check key
	if (webServer.config.apiKeys)
		if (!params.k || !webServer.config.apiKeys.contains(params.k))
			throw new Exception('Access denied')
			
	// parse parameters
	Parameters parameters=[params, binding]
	log.finer "Web server: Parameters: $parameters"
	
	// create chart
	def chart=createChart(parameters)
	
	// create graphics
	def image=chart.createBufferedImage(parameters.width, parameters.height)
	def encoder=ImageEncoderFactory.newInstance('png')
	
	// send graphics
	response.contentType='image/png'
	encoder.encode(image, sout)
	
	log.finer "Web server: Trend generated in ${System.currentTimeMillis()-startTime}ms"
} // catchToLog
