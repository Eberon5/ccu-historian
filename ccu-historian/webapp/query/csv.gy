import groovy.time.TimeCategory
import java.text.*
import mdz.ccuhistorian.Database
import groovy.transform.Field
import org.slf4j.LoggerFactory

@Field
private final static log = LoggerFactory.getLogger('mdz.ccuhistorian.webapp.Csv')

utils.catchToLog(log) {

// Schlüsselwort überprüfen
if (webServer.config.apiKeys)
	if (!params.k || !webServer.config.apiKeys.contains(params.k))
		throw new Exception('Access denied')	

// Aufrufparameter auswerten
if (!params.i)
	throw new Exception('Page parameter i (data point id) not set or invalid')
def dataPoint=utils.parseDataPoint(params.i, database)
def begin=utils.parseDate(params.b)
def duration=utils.parseDuration(params.d)
def end=utils.parseDate(params.e)
use (TimeCategory) {
	if (!begin) { 
		if (!end) end=new Date()
		if (!duration) begin=end-1
		else begin=end-duration
	} else { 
		if (!end) {
			if (!duration) end=new Date()
			else end=begin+duration
}	}	}

// Zeitreihe abfragen
def timeSeries
if (dataPoint.historyString)
	timeSeries=database.getTimeSeriesRaw(dataPoint, begin, end)
else
	timeSeries=database.getTimeSeries(dataPoint, begin, end)
	
// CSV-Datei erstellen
def dateFormat=new SimpleDateFormat('dd.MM.yyyy HH:mm:ss,SSS')
def displayName=(dataPoint.attributes.displayName?:dataPoint.id.address)+'.'+dataPoint.id.identifier
def sb=new StringBuilder()
sb << displayName << ';;\n'
sb << 'Zeitstempel;Wert;Status\n'
def valueFormatter
if (dataPoint.historyString) {
	valueFormatter={ '"'+it.tr('"', '""')+'"' }
} else {
	def numberFormat=new DecimalFormat('#,##0.###')
	valueFormatter={ numberFormat.format(it.value) }
}
timeSeries.each {
	sb << dateFormat.format(it.timestamp) << ';' << valueFormatter(it.value) << ';' << it.state << '\n'
}

// CSV-Datei verschicken
def fileName=displayName.replaceAll(/[^a-zA-Z0-9_]/, '_')+'.csv'
response.contentType='text/csv'
response.setHeader 'Content-disposition', "attachment; filename=$fileName"
out << sb

} // catchToLog
