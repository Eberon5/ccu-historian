import groovy.time.TimeCategory
import groovy.transform.Field
import groovy.transform.CompileStatic
import org.jfree.chart.JFreeChart
import org.jfree.chart.ChartColor
import org.jfree.data.xy.XYSeries
import org.jfree.data.xy.XYSeriesCollection
import org.jfree.chart.axis.DateAxis
import org.jfree.chart.axis.NumberAxis
import org.jfree.chart.encoders.ImageEncoderFactory
import org.jfree.chart.renderer.xy.XYStepRenderer
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer
import org.jfree.chart.plot.XYPlot
import org.jfree.chart.plot.CombinedDomainXYPlot
import org.jfree.chart.plot.PlotOrientation
import mdz.hc.TimeSeries
import mdz.hc.DataPoint
import mdz.ccuhistorian.LogSystem
import mdz.ccuhistorian.TrendDesign
import mdz.ccuhistorian.Database
import org.slf4j.LoggerFactory

@Field
private final static log=LoggerFactory.getLogger('mdz.ccuhistorian.webapp.Trend')

// Hilfsfunktionen

def applyDesign(obj, cl) {
	if (cl) {
		try { synchronized(cl) {
			cl.delegate=obj
			cl.resolveStrategy=Closure.DELEGATE_ONLY
			cl()
		}	} catch (Exception e) {
			throw new Exception('Configuration option webServer.trendDesigns is invalid', e)
} 	}	}

def applyDesign(obj, cls, idx) {
	if (cls) {
		def cl;	try {
			cl=cls[idx%cls.size()]
		} catch (Exception e) {
			throw new Exception('Configuration option webServer.trendDesigns is invalid', e)
		}
		applyDesign obj, cl
}	}

@CompileStatic
static addToXYSeries(TimeSeries timeSeries, XYSeries xySeries) {
	if (!timeSeries.isNumeric())
		throw new IllegalStateException("Type of time series is not numeric");
	final long[] timestamps=timeSeries.timestamps
	final double[] values=(double[])timeSeries.values
	final int size=timeSeries.size
	for (int idx = 0; idx < size; ++idx)
		xySeries.add(timestamps[idx], values[idx]);
}

// Klasse für die Aufnahme der URL-Parameter

class Parameters {

	static class Group {
		int height=1
		List<DataPoint> dataPoints=new ArrayList<DataPoint>()
		@Override
		String toString() {
			"(height: $height, dataPoints: $dataPoints.displayName)"
		}
	}

	int width, height
	Date begin, end
	TrendDesign trendDesign
	Map<Integer /* Gruppen-ID */, Group> groups=new TreeMap<>().withDefault { new Group() }

	Parameters(params, binding) {
		// Höhe und Breite der Trend-Grafik
		try {
			width=(params.w?:'640') as Integer
			height=(params.h?:'260') as Integer
		} catch (NumberFormatException e) {
			throw new Exception('Page parameter w (width) or h (height) is invalid')
		}
		
		// Datenpunkt-IDs
		if (!params.i)
			throw new Exception('Page parameter i (data point id/s) not set')
		def dataPoints=binding.utils.parseDataPointList(params.i, binding.database)
	
		// Datenpunkt-Gruppen
		def dpGroups
		if (!params.g)
			dpGroups=[0]*dataPoints.size()
		else {
			try {
				if (params.g instanceof String)
					dpGroups=[params.g as Integer]
				else
					dpGroups=params.g.collect { it as Integer }
			} catch (NumberFormatException e) {
				throw new Exception('Page parameter g (data point group/s) is invalid (not a number)')
			}
		}
		if (dataPoints.size()!=dpGroups.size())
			throw new Exception('Page parameter g (data point group/s) is invalid (wrong count)')

		// Gruppen zusammen bauen
		[dataPoints, dpGroups].transpose().each {
			def (dp, group)=it
			groups[group].dataPoints << dp
		}

		// Gruppenhöhen
		def groupHeights
		if (!params.gh)
			groupHeights=[1]*dpGroups.unique().size()
		else {
			try {
				if (params.gh instanceof String)
					groupHeights=[params.gh as Integer]
				else
					groupHeights=params.gh.collect { it as Integer }
			} catch (NumberFormatException e) {
				throw new Exception('Page parameter gh (group height/s) is invalid (not a number)')
			}
		}
		if (groups.size()!=groupHeights.size())
			throw new Exception('Page parameter gh (group height/s) is invalid (wrong count)')

		[groups.values().asList(), groupHeights].transpose().each {
			def (group, height)=it
			group.height=height
		}

		// Zeitbereich	
		begin=binding.utils.parseDate(params.b)
		end=binding.utils.parseDate(params.e)
		def duration=binding.utils.parseDuration(params.d)
		use (TimeCategory) {
			if (!begin) {
				if (!end) end=new Date()
				if (!duration) begin=end-1
				else begin=end-duration
			} else {
				if (!end) {
					if (!duration) end=new Date()
					else end=begin+duration
		}	}	}
		
		// Trend-Design
		if (params.t && params.t!='default') {
			trendDesign=binding.webServer.config.trendDesigns[params.t]
			if (!trendDesign)
				throw new Exception("Page parameter t (trend design) is invalid")
		} else trendDesign=binding.webServer.config.trendDesigns['default']?:new TrendDesign()
	}
	
	@Override
	String toString() {
		"width: $width, height: $height, groups: $groups, begin: $begin, end: $end"
	}
}

// Chart erzeugen

class PlotState {
	int totalDataPointIdx=0
	int totalAxisIdx=0
}

def createPlot(parameters, dataPoints, plotState) {
	// Plot erzeugen
	def plot=new XYPlot()
	plot.backgroundPaint=new ChartColor(245, 245, 245)
	applyDesign plot, parameters.trendDesign.plot
	
	// Y-Achsen
	// Datenpunkte mit identischem Wertebereich und identischer Einheit erhalten
	// die gleiche Y-Achse.
	def rangeAxes=[:]
	def rangeAxesDisplayIdx=[]
	def visibleRangeAxesCnt=0
	
	// Zeitreihen und Y-Achsen erstellen
	dataPoints.eachWithIndex { dataPoint, dpIdx ->
		
		if (dataPoint.historyString)
			throw new Exception("Data point $dataPoint.displayName is not numeric")
		def displayName=dataPoint.id.interfaceId+'.'+(dataPoint.attributes.displayName?:dataPoint.id.address)+'.'+
			dataPoint.id.identifier
		def isAction=dataPoint.attributes.type=='ACTION'
	
		// Y-Achse auswaehlen bzw. erstellen
		def axisKey=[dataPoint.attributes.type, dataPoint.attributes.unit, dataPoint.attributes.minimum, dataPoint.attributes.maximum]
		def axisIdx=rangeAxes[axisKey]
		if (axisIdx==null) {
			axisIdx=rangeAxes.size()
			def numberAxis=new NumberAxis(dataPoint.attributes.unit)
			numberAxis.autoRangeIncludesZero=false
			numberAxis.autoRangeStickyZero=false
			numberAxis.upperMargin=0.02
			numberAxis.lowerMargin=0.02
			if (isAction) {
				numberAxis.visible=false
				rangeAxesDisplayIdx << 0
			} else {
				visibleRangeAxesCnt++
				rangeAxesDisplayIdx << visibleRangeAxesCnt
			}
			applyDesign numberAxis, parameters.trendDesign.rangeAxes, plotState.totalAxisIdx
			plot.setRangeAxis(axisIdx, numberAxis)
			rangeAxes[axisKey]=axisIdx
			plotState.totalAxisIdx++
		}
			
		// Zeitreihe abfragen und konvertieren
		def timeSeries
		if (isAction) timeSeries=database.getTimeSeriesRaw(dataPoint, parameters.begin, parameters.end)
		else timeSeries=database.getTimeSeries(dataPoint, parameters.begin, parameters.end)
		def dispIdx=rangeAxesDisplayIdx[axisIdx]
		XYSeries xySeries=new XYSeries(displayName+(dispIdx>0?' ('+dispIdx+')':''))
		addToXYSeries(timeSeries, xySeries)
		applyDesign xySeries, parameters.trendDesign.series, plotState.totalDataPointIdx
		def xySeriesCollection=new XYSeriesCollection(xySeries)
		plot.setDataset(dpIdx, xySeriesCollection)
		
		// Y-Achsenzuordnung
		plot.mapDatasetToRangeAxis(dpIdx, axisIdx)
	
		// Renderer anlegen
		def renderer
		if (isAction) {
			renderer=new XYLineAndShapeRenderer()
			renderer.baseShapesVisible=true
			renderer.baseLinesVisible=false
		} else renderer=new XYStepRenderer()
		renderer.paint=TrendDesign.getDefaultColor(plotState.totalDataPointIdx)
		applyDesign renderer, parameters.trendDesign.renderers, plotState.totalDataPointIdx
		plot.setRenderer(dpIdx, renderer)
		
		plotState.totalDataPointIdx++
	}
	plot
}

def createCombinedPlot(parameters) {
	// Zeitachse
	def timeAxis = new DateAxis()
	timeAxis.lowerMargin=0.00 // keine Raender
	timeAxis.upperMargin=0.00
	timeAxis.setRange(parameters.begin, parameters.end)
	applyDesign timeAxis, parameters.trendDesign.timeAxis

	// kombinierten Plot anlegen
	def combinedPlot=new CombinedDomainXYPlot(timeAxis)
	combinedPlot.setGap(10.0);
	combinedPlot.setOrientation(PlotOrientation.VERTICAL);
	
	// Subplots erzeugen
	PlotState plotState=[]
	parameters.groups.values().each { group ->
		combinedPlot.add(createPlot(parameters, group.dataPoints, plotState), group.height)
	}
	combinedPlot
}

def createChart(parameters) {
	// Chart erzeugen
	def chart=new JFreeChart(null, JFreeChart.DEFAULT_TITLE_FONT, createCombinedPlot(parameters), true)
	chart.backgroundPaint=ChartColor.WHITE
	applyDesign chart, parameters.trendDesign.chart
	chart
}

// Hauptfunktion

utils.catchToLog(log) {
	def startTime=System.currentTimeMillis()
	log.trace 'Web server: Generating trend'
	
	// Schlüsselwort überprüfen
	if (webServer.config.apiKeys)
		if (!params.k || !webServer.config.apiKeys.contains(params.k))
			throw new Exception('Access denied')
			
	// Aufrufparameter auswerten
	Parameters parameters=[params, binding]
	log.trace "Web server: Parameters: $parameters"
	
	// Chart erzeugen
	def chart=createChart(parameters)
	
	// Grafik erzeugen
	def image=chart.createBufferedImage(parameters.width, parameters.height)
	def encoder=ImageEncoderFactory.newInstance('png')
	
	// Grafik verschicken
	response.contentType='image/png'
	encoder.encode(image, sout)
	
	log.trace "Web server: Trend generated in ${System.currentTimeMillis()-startTime}ms"
} // catchToLog
