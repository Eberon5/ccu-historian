/*
    CCU-Historian, a long term archive for the HomeMatic CCU
    Copyright (C) 2015-2018 MDZ (info@ccu-historian.de), ldittmar (help.webmatic@lmdsoft.de)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
import groovy.time.TimeCategory
import java.text.*
import mdz.ccuhistorian.Database

if (webServer.config.apiKeys)
    if (!params.k || !webServer.config.apiKeys.contains(params.k))
	throw new Exception('Access denied')	

// Aufrufparameter auswerten
if (!params.i)
    throw new Exception('Page parameter i (data point id/s) not set or invalid')

def timeRange=utils.newTimeRange(params.b, params.e)
def begin=timeRange.begin
def end=timeRange.end

def sb = new StringBuilder()

def searchList = params.i.split(",")
def first = true
sb << 'historian_callback('
for(String id: searchList){
    if(first){
        first = false
    }else{
        sb << ","
    }
    // Zeitreihe abfragen
    def dataPoint = utils.parseDataPoint(id, database)
    if (dataPoint){
        def timeSeries
        if (dataPoint.isHistoryString())
            timeSeries = database.getTimeSeriesRaw(dataPoint, begin, end)
        else
            timeSeries = database.getTimeSeries(dataPoint, begin, end)

        // JSON erstellen
        def dateFormat = new SimpleDateFormat('yyyy-MM-dd HH:mm:ss')

        def valueFormatter
        if (dataPoint.isHistoryString()) {
            valueFormatter = { '"' + it.tr('"', '""') + '"' }
        } else {
            def numberFormat = new DecimalFormat('#,##0.###')
            valueFormatter = { numberFormat.format(it.value) }
        }
        
        def comma = true
        sb << '['
        timeSeries.each {
            if(comma){
                comma = false
            }else{
                sb << ","
            }
            sb << '["' << dateFormat.format(it.timestamp) << '",' << valueFormatter(it.value) << ']'
        }
        sb << ']'        
    }
}
sb << ');'

// CSV-Datei verschicken
response.contentType='text/plain'
out << sb