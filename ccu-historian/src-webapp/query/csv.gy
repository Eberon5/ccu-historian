/*
    CCU-Historian, a long term archive for the HomeMatic CCU
    Copyright (C) 2011-2018 MDZ (info@ccu-historian.de)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
import groovy.time.TimeCategory
import groovy.transform.Field
import java.text.*
import java.util.logging.Logger
import javax.servlet.http.HttpServletResponse
import mdz.ccuhistorian.Database
import mdz.ccuhistorian.webapp.TrendParameters

@Field
private final static log = Logger.getLogger('mdz.ccuhistorian.webapp.Csv')

// main function

def ex=utils.catchToLog(log) {
	def startTime=System.currentTimeMillis()
	log.finer 'Web server: Exporting CSV'
	
	// check key
	if (webServer.config.apiKeys)
		if (!params.k || !webServer.config.apiKeys.contains(params.k))
			throw new Exception('Access denied')
			
	// parse parameters
	TrendParameters parameters=TrendParameters.from(request, database, webServer.config.trendDesigns)
	log.finer "Web server: Parameters: $parameters"
	if (!parameters.groups) {
		throw new IllegalArgumentException('Parameter dp... (data point id/s) not set')
	}
	def dataPoint=parameters.groups.firstEntry().value.dataPoints[0]
	
	// get time series
	def timeSeries
	if (dataPoint.historyString || dataPoint.attributes.type=='ACTION') {
		// without boundary values
		timeSeries=database.getTimeSeriesRaw(dataPoint, parameters.timeRange.begin, parameters.timeRange.end)
	} else {
		// with boundary values
		timeSeries=database.getTimeSeries(dataPoint, parameters.timeRange.begin, parameters.timeRange.end)
	}

	// create CSV (uses german MS Excel CSV format)
	def dateFormat=new SimpleDateFormat('dd.MM.yyyy HH:mm:ss,SSS')
	def sb=new StringBuilder()
	sb << dataPoint.displayName << ';;\n'
	sb << 'Zeitstempel;Wert;Status\n'
	def valueFormatter
	if (dataPoint.historyString) {
		valueFormatter={ '"'+it.tr('"', '""')+'"' }
	} else {
		def numberFormat=new DecimalFormat('#,##0.###')
		valueFormatter={ numberFormat.format(it) }
	}
	timeSeries.each {
		sb << dateFormat.format(it.timestamp) << ';' << valueFormatter(it.value) << ';' << it.state << '\n'
	}
	
	// send CSV file
	def fileName=dataPoint.displayName.replaceAll(/[^a-zA-Z0-9_]/, '_')+'.csv'
	response.contentType='text/csv'
	response.setHeader 'Content-disposition', "attachment; filename=$fileName"
	out << sb
	
	log.finer "Web server: CSV export generated in ${System.currentTimeMillis()-startTime}ms"
}

// signal error

if (ex) {
	utils.catchToLog(log) {
		response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.message?:ex.class.name)
	}
}
