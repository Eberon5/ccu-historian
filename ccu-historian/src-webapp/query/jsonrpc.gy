/*
    CCU-Historian, a long term archive for the HomeMatic CCU
    Copyright (C) 2011-2018 MDZ (info@ccu-historian.de)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
import mdz.ccuhistorian.DatabaseExpressionAdapter
import mdz.ccuhistorian.Main
import mdz.ccuhistorian.ExpressionParser
import mdz.hc.timeseries.TimeSeries.CompactTimeSeries
import mdz.hc.timeseries.TimeSeries
import mdz.hc.persistence.ReadOnlyDecorator
import mdz.hc.DataPointIdentifier
import mdz.hc.DataPoint
import mdz.Exceptions
import groovy.json.JsonSlurper
import groovy.json.StreamingJsonBuilder
import groovy.transform.Field
import java.util.logging.Logger
import java.util.logging.Level
import org.codehaus.groovy.control.CompilerConfiguration
import org.codehaus.groovy.control.customizers.ImportCustomizer
import org.codehaus.groovy.control.customizers.SecureASTCustomizer
import org.codehaus.groovy.control.customizers.ASTTransformationCustomizer

@Field
private final static log = Logger.getLogger('mdz.ccuhistorian.webapp.JsonRpc')

// add CORS headers
response.setHeader('Access-Control-Allow-Origin', webServer.config.corsOrigin);
if (webServer.config.corsOrigin!='*') {
	response.setHeader('Access-Control-Allow-Credentials', 'true');
}
response.setHeader('Access-Control-Allow-Methods', 'GET,POST,PUT,OPTIONS');
response.setHeader('Access-Control-Allow-Headers', '*');
if (request.method=="OPTIONS") {
	response.status=response.SC_ACCEPTED
	return
}

def rpcResponse=[:]
rpcResponse.id=null
try {
	// check API key
	if (webServer.config.apiKeys)
		if (!params.k || !webServer.config.apiKeys.contains(params.k))
			throw new Exception('Access denied')
			
	// parse request
	def rpcRequest=getRpcRequest()
	
	// check structure
	checkRpcRequest rpcRequest
	rpcResponse.id=rpcRequest.id
	
	// handle echo method
	if (rpcRequest.method=='echo')
		rpcResponse.result=rpcRequest.params
	else {
		// search method
		def func=rpcFunctions[rpcRequest.method]
		if (!func) 
			throw new RpcException('Method not found', RpcException.METHOD_NOT_FOUND)
		// execute method
		synchronized (func) {
			func.delegate=this
			rpcResponse.result=func(rpcRequest.params)
		}
	}
} catch (RpcException e) {
	rpcResponse.remove 'result'
	rpcResponse.error=[code: e.code, message: e.message]
	log.warning 'JSON-RPC error response'
	Exceptions.logTo(log, Level.WARNING, e)
} catch (Exception e) {
	rpcResponse.remove 'result'
	rpcResponse.error=[code: RpcException.SERVER_ERROR, message: e.message]
	log.warning 'JSON-RPC error response'
	Exceptions.logTo(log, Level.WARNING, e)
}

// send JSON response
response.contentType='application/json'
new StreamingJsonBuilder(out)(rpcResponse)

class RpcException extends Exception {
	public final static int PARSE_ERROR		 = -32700
	public final static int INVALID_REQUEST	 = -32600
	public final static int METHOD_NOT_FOUND = -32601
	public final static int INVALID_PARAMS	 = -32602
	public final static int INTERNAL_ERROR	 = -32603
	public final static int SERVER_ERROR	 = -32000

	int code
	RpcException(String message, int code=INTERNAL_ERROR, Throwable cause=null) {
		super(message, cause)
		this.code=code
	}
}

def getRpcRequest() {
	def rpcRequest
	if (params.m) {
		// Aufrufart GET/POST mit Parametern m/p/i
		rpcRequest=[method:params.m]
		rpcRequest.params=[]
		def idx=1, p
		while ((p=params."p$idx")!=null) { rpcRequest.params << p; idx++ }
		rpcRequest.id=params.i
	} else {
		String json
		if (params.j) {
			// Aufrufart GET/POST mit Parameter j
			json=params.j
		} else {
			// Aufrufart POST mit Content-Type application/json
			StringWriter writer=[]
			writer << request.reader
			json=writer.toString()
		}
		// JSON-Anfrage parsen
		try {
			rpcRequest=new JsonSlurper().parseText(json)
		} catch (Exception e) {
			throw new RpcException('JSON parse error', RpcException.PARSE_ERROR, e)
		}
	}
	rpcRequest
}

def checkRpcRequest(rpcRequest) {
	if (!(rpcRequest instanceof Map) || rpcRequest.method==null || 
		!(rpcRequest.method instanceof String) || rpcRequest.params==null ||
		!(rpcRequest.params instanceof List))
		throw new RpcException('Request object invalid', RpcException.INVALID_REQUEST);
}

def getDataPoint(histDb, dpId) {
	def dp=histDb.getDataPoint(dpId as int)
	if (!dp) throw new RpcException('Invalid data point id', RpcException.SERVER_ERROR)
	dp	
}

def convertValue(v) {
	[timestamp: v.timestamp.time, value: v.value, state: v.state]	
}

def executeScript(script, writeAccess) {
	// configure script compiler
	CompilerConfiguration config=[]
	// default imports
	ImportCustomizer importCustomizer=[]
	importCustomizer.addStaticStars 'java.lang.Math',
		'mdz.ccuhistorian.webapp.TextFormat',
		'mdz.hc.ProcessValue',
		'mdz.hc.timeseries.expr.Characteristics',
		'mdz.hc.timeseries.expr.IntervalExpressions',
		'mdz.hc.timeseries.expr.Expressions'
	importCustomizer.addImport 'PreprocType', 'mdz.ccuhistorian.eventprocessing.Preprocessor.Type'
	importCustomizer.addImports 'mdz.hc.DataPoint',
		'mdz.hc.DataPointIdentifier',
		'mdz.hc.Event',
		'mdz.hc.ProcessValue',
		'mdz.hc.RawEvent',
		'mdz.hc.timeseries.TimeSeries',
		'mdz.hc.timeseries.expr.Expression'
	config.addCompilationCustomizers importCustomizer
	// security
	SecureASTCustomizer secureCustomizer=[]
	secureCustomizer.with {
		importsWhitelist=[
			'mdz.ccuhistorian.eventprocessing.Preprocessor$Type',
			'mdz.hc.DataPoint',
			'mdz.hc.DataPointIdentifier',
			'mdz.hc.Event',
			'mdz.hc.ProcessValue',
			'mdz.hc.RawEvent',
			'mdz.hc.timeseries.TimeSeries',
			'mdz.hc.timeseries.expr.Expression'
		]
		staticImportsWhitelist=[]
		staticStarImportsWhitelist=[
			'java.lang.Math',
			'mdz.ccuhistorian.webapp.TextFormat',
			'mdz.hc.ProcessValue',
			'mdz.hc.timeseries.expr.Characteristics',
			'mdz.hc.timeseries.expr.IntervalExpressions',
			'mdz.hc.timeseries.expr.Expressions'
		]
		receiversBlackList=['java.lang.System']
	}
	config.addCompilationCustomizers secureCustomizer
	
	// configure binding	
	Binding binding=[]
	def output=new StringWriter()
	def writer=new PrintWriter(output)
	binding.out=writer
	binding.database=writeAccess ? database : new ReadOnlyDecorator(database)
	def exprAdapter=new DatabaseExpressionAdapter(storage: database)
	binding.dataPoint=exprAdapter.&dataPoint
	binding.version=Main.version 
	
	// create shell and execute script
	GroovyShell shell=[binding, config]
	def result=shell.evaluate(script, 'UserScript')
	
	// no script output and result available?
	if (output.buffer.length()==0 && result!=null) {
		// print result object
		if (result instanceof Iterable) {
			result=result.iterator()
		}
		if (result instanceof Iterator) { 
			result.each {
				writer.println it	
			}
		} else {
			writer.print result
		}
	}
	output.toString()
}

@Field 
private static rpcFunctions=[
	getDataPoint:{ params ->
		if (params.size()==0) {
			// all data points
			database.dataPoints
		} else if (params.size()==1) { 
			if (params[0] instanceof List) {
				// list of data points
				params[0].collect { utils.parseDataPoint(it as String, database) }
			} else if (params[0] instanceof Map) {
				// single data point by ID object
				def ident=new DataPointIdentifier(params[0]?.id?.interfaceId, params[0]?.id?.address, params[0]?.id?.identifier)
				if (ident.interfaceId==null || ident.address==null || ident.identifier==null) {
					throw new RpcException("Invalid field id (no interfaceId, address or identifier)", RpcException.INVALID_PARAMS)
				}
				database.getDataPoint(ident)
			} else {
				// single data point by ID string
				utils.parseDataPoint(params[0] as String, database)
			}
		} else {
			throw new RpcException("Invalid number of parameters for getDataPoint", RpcException.INVALID_PARAMS)
		} 
	},
	
	updateDataPoint:{ params ->
		if (params.size()!=1) {
			throw new RpcException("Invalid number of parameters for updateDataPoint", RpcException.INVALID_PARAMS)
		}
		def updateDp=params[0]
		def ident=new DataPointIdentifier(updateDp?.id?.interfaceId, updateDp?.id?.address, updateDp?.id?.identifier)
		if (ident.interfaceId==null || ident.address==null || ident.identifier==null) {
			throw new RpcException("Invalid field id (no interfaceId, address or identifier)", RpcException.INVALID_PARAMS)
		}
		def dbDp=database.getDataPoint(ident)
		if (dbDp==null) {
			throw new RpcException("Data point not found: $ident", RpcException.INVALID_PARAMS)
		}
		// merge custom attribute
		def custom=updateDp.attributes?.custom
		if (custom==null || !(custom instanceof Map) ) {
			throw new RpcException("Invalid custom attribute (missing or not an object)", RpcException.INVALID_PARAMS)
		}
		custom.each { k, v ->
			if (v!=null) {
				dbDp.attributes.custom[k]=v
			} else {
				dbDp.attributes.custom.remove(k)
			}
		}
		// update only if present
		if (updateDp.managementFlags!=null) {
			dbDp.managementFlags=updateDp.managementFlags
		}
		if (updateDp.attributes?.displayName!=null) {
			dbDp.attributes.displayName=updateDp.attributes.displayName
		}
		if (updateDp.attributes?.room!=null) {
			dbDp.attributes.room=updateDp.attributes.room
		}
		if (updateDp.attributes?.function!=null) {
			dbDp.attributes.function=updateDp.attributes.function
		}
		if (updateDp.attributes?.comment!=null) {
			dbDp.attributes.comment=updateDp.attributes.comment
		}
		if (updateDp.attributes?.maximum!=null) {
			dbDp.attributes.maximum=updateDp.attributes.maximum
		}
		if (updateDp.attributes?.unit!=null) {
			dbDp.attributes.unit=updateDp.attributes.unit
		}
		if (updateDp.attributes?.minimum!=null) {
			dbDp.attributes.minimum=updateDp.attributes.minimum
		}
		if (updateDp.attributes?.type!=null) {
			dbDp.attributes.type=updateDp.attributes.type
		}
		database.updateDataPoint(dbDp)
	},
	
	createDataPoint:{ params ->
		if (params.size()!=1) {
			throw new RpcException("Invalid number of parameters for createDataPoint", RpcException.INVALID_PARAMS)
		}
		def createDp=params[0]
		def ident=new DataPointIdentifier(createDp?.id?.interfaceId, createDp?.id?.address, createDp?.id?.identifier)
		if (ident.interfaceId==null || ident.address==null || ident.identifier==null) {
			throw new RpcException("Invalid field id (no interfaceId, address or identifier)", RpcException.INVALID_PARAMS)
		}
		if (ident.interfaceId!="User") {
			throw new RpcException("User defined data points must have 'User' as interface ID", RpcException.INVALID_PARAMS)
		}
		def dp=new DataPoint(id: ident)
		dp.managementFlags=createDp.managementFlags?:0
		dp.attributes.displayName=createDp.attributes?.displayName
		dp.attributes.room=createDp.attributes?.room
		dp.attributes.function=createDp.attributes?.function
		dp.attributes.comment=createDp.attributes?.comment
		dp.attributes.custom=createDp.attributes?.custom?:[:]
		dp.attributes.paramSet="VALUES"
		dp.attributes.maximum=createDp.attributes?.maximum
		dp.attributes.unit=createDp.attributes?.unit
		dp.attributes.minimum=createDp.attributes?.minimum
		dp.attributes.type=createDp.attributes?.type?:"FLOAT"
		database.createDataPoint(dp)
		null
	},
	
	getValue:{ params ->
		if (params[0] instanceof List)
			params[0].collect { convertValue(database.getLast(
				utils.parseDataPoint(it as String, database)
			)) }
		else
			convertValue(database.getLast(
				utils.parseDataPoint(params[0] as String, database)
			))
	},
	
	getTimeSeriesRaw:{ params ->
		new CompactTimeSeries(database.getTimeSeriesRaw(
			utils.parseDataPoint(params[0] as String, database), 
			new Date(params[1] as long), 
			new Date(params[2] as long)
		))
	},
	
	getTimeSeries:{ params ->
		new CompactTimeSeries(database.getTimeSeries(
			utils.parseDataPoint(params[0] as String, database), 
			new Date(params[1] as long), 
			new Date(params[2] as long)
		))
	},
	
	insertTimeSeries:{ params ->
		if (params.size()!=2) {
			throw new RpcException("Invalid number of parameters for insertTimeSeries", RpcException.INVALID_PARAMS)
		}
		def timeSeries=new TimeSeries(utils.parseDataPoint(params[0] as String, database))
		try {
			def timestamps=params[1].timestamps
			def values=params[1].values
			def states=params[1].states
			if (timestamps.size() != values.size() || timestamps.size()!=states.size()) {
				throw new RpcException("Invalid array length in time series object", RpcException.INVALID_PARAMS)
			}
			timestamps.eachWithIndex { ts, idx ->
				timeSeries.add((long)ts, values[idx], (int)states[idx])
			}
		} catch (Exception e){
			throw new RpcException("Invalid time series object", RpcException.INVALID_PARAMS, e)
		}
		database.insertTimeSeries(timeSeries)
	},
	
	deleteTimeSeries:{ params ->
		if (params.size()!=3) {
			throw new RpcException("Invalid number of parameters for deleteTimeSeries", RpcException.INVALID_PARAMS)
		}
		def dp=utils.parseDataPoint(params[0] as String, database)
		database.deleteTimeSeries(
			dp, 
			new Date(params[1] as long),
			new Date(params[2] as long)
		)
	},

	calculateTimeSeries: { params ->
		// get parameters
		if (params.size()!=3) {
			throw new RpcException("Invalid number of parameters for calculateTimeSeries", RpcException.INVALID_PARAMS)
		}
		if (!(params[0] instanceof String && params[1] instanceof Number && params[2] instanceof Number)) {
			throw new RpcException("Invalid parameter type(s) for calculateTimeSeries", RpcException.INVALID_PARAMS)
		}
		def exprTxt=params[0] as String
		def begin=new Date(params[1] as long)
		def end=new Date(params[2] as long)
		
		// parse expression and calculate time series
		def parser=new ExpressionParser(database)
		def expr=parser.parse(exprTxt)
		def ts=expr.read(begin, end)
		
		// convert result
		def timestamps=[]
		def values=[]
		def states=[]
		ts.each { pv -> 
			timestamps << pv.timestamp.time
			values << pv.value
			states << pv.state
		}
		[timestamps: timestamps, values: values, states: states, characteristics:expr.characteristics]
	},

	setValue:{ params ->
		interfaceManager.writeValue(utils.parseDataPoint(params[0] as String, database), params[1])
		null
	},
	
	executeScript:{ params ->
		if (params.size()==0) {
			throw new RpcException("Missing parameter(s) for executeScript", RpcException.INVALID_PARAMS)
		}
		def script=params[0]
		def writeAccess=false
		if (params.size()==2 && params[1].toBoolean()) {
			writeAccess=true
		}
		executeScript(script, writeAccess)
	},

	getConfig:{ params ->
		if (params.size()!=1) {
			throw new RpcException("Invalid number of parameters for getConfig", RpcException.INVALID_PARAMS)
		}
		database.getConfig(params[0] as String)
	},
	
	setConfig:{ params ->
		if (params.size()!=2) {
			throw new RpcException("Invalid number of parameters for setConfig", RpcException.INVALID_PARAMS)
		}
		database.setConfig(params[0] as String, params[1] as String)
        null
	},
]
