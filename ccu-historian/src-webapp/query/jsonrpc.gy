/*
    CCU-Historian, a long term archive for the HomeMatic CCU
    Copyright (C) 2011-2018 MDZ (info@ccu-historian.de)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
import mdz.hc.timeseries.TimeSeries.CompactTimeSeries
import mdz.hc.persistence.ReadOnlyDecorator
import mdz.Exceptions
import groovy.json.JsonSlurper
import groovy.json.StreamingJsonBuilder
import groovy.transform.Field
import java.util.logging.Logger
import java.util.logging.Level
import org.codehaus.groovy.control.CompilerConfiguration
import org.codehaus.groovy.control.customizers.ImportCustomizer
import org.codehaus.groovy.control.customizers.SecureASTCustomizer
import org.codehaus.groovy.control.customizers.ASTTransformationCustomizer

@Field
private final static log = Logger.getLogger('mdz.ccuhistorian.webapp.JsonRpc')

def rpcResponse=[:]
rpcResponse.id=null
try {
	// check API key
	if (webServer.config.apiKeys)
		if (!params.k || !webServer.config.apiKeys.contains(params.k))
			throw new Exception('Access denied')
			
	// parse request
	def rpcRequest=getRpcRequest()
	
	// check structure
	checkRpcRequest rpcRequest
	rpcResponse.id=rpcRequest.id
	
	// handle echo method
	if (rpcRequest.method=='echo')
		rpcResponse.result=rpcRequest.params
	else {
		// search method
		def func=rpcFunctions[rpcRequest.method]
		if (!func) 
			throw new RpcException('Method not found', RpcException.METHOD_NOT_FOUND)
		// execute method
		synchronized (func) {
			func.delegate=this
			rpcResponse.result=func(rpcRequest.params)
		}
	}
} catch (RpcException e) {
	rpcResponse.remove 'result'
	rpcResponse.error=[code: e.code, message: e.message]
	log.warning 'JSON-RPC error response'
	Exceptions.logTo(log, Level.WARNING, e)
} catch (Exception e) {
	rpcResponse.remove 'result'
	rpcResponse.error=[code: RpcException.SERVER_ERROR, message: e.message]
	log.warning 'JSON-RPC error response'
	Exceptions.logTo(log, Level.WARNING, e)
}

// send JSON response
response.contentType='application/json'
new StreamingJsonBuilder(out)(rpcResponse)

class RpcException extends Exception {
	public final static int PARSE_ERROR		 = -32700
	public final static int INVALID_REQUEST	 = -32600
	public final static int METHOD_NOT_FOUND = -32601
	public final static int INVALID_PARAMS	 = -32602
	public final static int INTERNAL_ERROR	 = -32603
	public final static int SERVER_ERROR	 = -32000

	int code
	RpcException(String message, int code=INTERNAL_ERROR, Throwable cause=null) {
		super(message, cause)
		this.code=code
	}
}

def getRpcRequest() {
	def rpcRequest
	if (params.m) {
		// Aufrufart GET/POST mit Parametern m/p/i
		rpcRequest=[method:params.m]
		rpcRequest.params=[]
		def idx=1, p
		while ((p=params."p$idx")!=null) { rpcRequest.params << p; idx++ }
		rpcRequest.id=params.i
	} else {
		String json
		if (params.j) {
			// Aufrufart GET/POST mit Parameter j
			json=params.j
		} else {
			// Aufrufart POST mit Content-Type application/json
			StringWriter writer=[]
			writer << request.reader
			json=writer.toString()
		}
		// JSON-Anfrage parsen
		try {
			rpcRequest=new JsonSlurper().parseText(json)
		} catch (Exception e) {
			throw new RpcException('JSON parse error', RpcException.PARSE_ERROR, e)
		}
	}
	rpcRequest
}

def checkRpcRequest(rpcRequest) {
	if (!(rpcRequest instanceof Map) || rpcRequest.method==null || 
		!(rpcRequest.method instanceof String) || rpcRequest.params==null ||
		!(rpcRequest.params instanceof List))
		throw new RpcException('Request object invalid', RpcException.INVALID_REQUEST);
}

def getDataPoint(histDb, dpId) {
	def dp=histDb.getDataPoint(dpId as int)
	if (!dp) throw new RpcException('Invalid data point id', RpcException.SERVER_ERROR)
	dp	
}

def convertValue(v) {
	[timestamp: v.timestamp.time, value: v.value, state: v.state]	
}

def executeScript(script, writeAccess) {
	// configure script compiler
	CompilerConfiguration config=[]
	// default imports
	ImportCustomizer importCustomizer=[]
	importCustomizer.addStaticStars 'java.lang.Math'
	importCustomizer.addImport 'PreprocType', 'mdz.ccuhistorian.eventprocessing.Preprocessor.Type'
	importCustomizer.addImports 'mdz.hc.DataPoint',
		'mdz.hc.DataPointIdentifier',
		'mdz.hc.Event',
		'mdz.hc.ProcessValue',
		'mdz.hc.RawEvent'
	config.addCompilationCustomizers importCustomizer
	// security
	SecureASTCustomizer secureCustomizer=[]
	secureCustomizer.with {
		importsWhitelist=[
			'mdz.ccuhistorian.eventprocessing.Preprocessor$Type',
			'mdz.hc.DataPoint',
			'mdz.hc.DataPointIdentifier',
			'mdz.hc.Event',
			'mdz.hc.ProcessValue',
			'mdz.hc.RawEvent',
		]
		staticImportsWhitelist=[]
		staticStarImportsWhitelist=[
			'java.lang.Math',
		]
		receiversBlackList=['java.lang.System']
	}
	config.addCompilationCustomizers secureCustomizer
	
	// configure binding	
	Binding binding=[]
	output=new StringWriter()
	binding.out=new PrintWriter(output)
	binding.database=writeAccess ? database : new ReadOnlyDecorator(database)
	
	// create shell and execute script
	GroovyShell shell=[binding, config]
	shell.evaluate script, 'UserScript'
	output.toString()
}

@Field 
private static rpcFunctions=[
	getDataPoint:{ params ->
		if (params.size()==0)
			database.dataPoints
		else if (params[0] instanceof List)
			params[0].collect { utils.parseDataPoint(it as String, database) }
		else
			utils.parseDataPoint(params[0] as String, database)
	},
	getValue:{ params ->
		if (params[0] instanceof List)
			params[0].collect { convertValue(database.getLast(
				utils.parseDataPoint(it as String, database)
			)) }
		else
			convertValue(database.getLast(
				utils.parseDataPoint(params[0] as String, database)
			))
	},
	getTimeSeriesRaw:{ params ->
		new CompactTimeSeries(database.getTimeSeriesRaw(
			utils.parseDataPoint(params[0] as String, database), 
			new Date(params[1] as long), 
			new Date(params[2] as long)
		))
	},
	getTimeSeries:{ params ->
		new CompactTimeSeries(database.getTimeSeries(
			utils.parseDataPoint(params[0] as String, database), 
			new Date(params[1] as long), 
			new Date(params[2] as long)
		))
	},
	setValue:{ params ->
		interfaceManager.writeValue(utils.parseDataPoint(params[0] as String, database), params[1])
		null
	},
	executeScript:{ params ->
		if (params.size()==0) {
			throw new RpcException("Missing parameter(s) for executeScript", RpcException.INVALID_PARAMS)
		}
		def script=params[0]
		def writeAccess=false
		if (params.size()==2 && params[1].toBoolean()) {
			writeAccess=true
		}
		executeScript(script, writeAccess)
	},
]
