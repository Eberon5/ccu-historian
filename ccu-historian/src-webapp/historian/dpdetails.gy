import mdz.ccuhistorian.webapp.TrendParameters
import mdz.hc.DataPoint
import groovy.transform.Field
import static mdz.ccuhistorian.webapp.TextFormat.*
import static mdz.ccuhistorian.webapp.WebUtilities.*

@Field
private static final int NUM_STRING_ENTRIES = 50

// setup page
def renderer=new mdz.ccuhistorian.webapp.PageRenderer(servlet: this)

def bitToText(value, bitMask) {
	value==null?'':(value & bitMask?'Ja':'Nein')
}

renderer.head={
	title 'CCU-historian: Datenpunktdetails'
}

renderer.content={
	def trendParams=new TrendParameters(request, database, webServer.config.trendDesigns)
	def apiKey=webServer.config.apiKeys ? [k:webServer.config.apiKeys[0]] : [:]
	
	trendParams.groups.values().dataPoints.flatten().each { dp ->
		def last=database.getLast(dp)
		
		div(class:'panel panel-default') {
			div(class:'panel-heading') {
				h3 class:'panel-title', dp.displayName
			}
			div(class:'panel-body') {
				// list data point meta data
				div(class:'row') {
					div(class:'col-md-6') {
						table(class:'table table-bordered') {
							tbody {
								tr { 
									th 'Schnittstelle'
									td dp.id.interfaceId 
								}	
								tr { 
									th 'Kanalname'
									td dp.attributes.displayName 
								}	
								tr { 
									th 'Seriennr.:Kanalnr.'
									td dp.id.address 
								}	
								tr { 
									th 'Parameter'
									td dp.id.identifier
								}	
								tr { 
									th 'Historian-ID'
									td dp.idx 
								}	
								tr { 
									th 'Aktueller Wert'
									td format(last?.value) 
								}	
								tr { 
									th 'Minimum'
									td formatNumber(dp.attributes.minimum) 
								}	
								tr { 
									th 'Maximum'
									td formatNumber(dp.attributes.maximum) 
								}	
								tr { 
									th 'Einheit'
									td dp.attributes.unit 
								}	
								tr { 
									th 'Zeitstempel'
									td formatDate(last?.timestamp) 
								}	
							} 
						}
					}
					div(class:'col-md-6') {
						table(class:'table table-bordered') {
							tbody {
								tr { 
									th 'Standardwert'
									td format(dp.attributes.defaultValue) 
								}
								tr { 
									th 'Datentyp'
									td dp.attributes.type 
								}
								tr { 
									th 'Lesbar'
									td bitToText(dp.attributes.operations, DataPoint.ATTR_OPERATIONS_READ) 
								}
								tr { 
									th 'Beschreibbar'
									td bitToText(dp.attributes.operations, DataPoint.ATTR_OPERATIONS_WRITE) 
								}
								tr {
									 th 'Ereignis'
									 td bitToText(dp.attributes.operations, DataPoint.ATTR_OPERATIONS_EVENT) 
								}
								tr { 
									th 'Sichtbar'
									td bitToText(dp.attributes.flags, DataPoint.ATTR_FLAGS_VISIBLE) 
								}
								tr { 
									th 'Wartungsmeldung'
									td bitToText(dp.attributes.flags, DataPoint.ATTR_FLAGS_SERVICE) 
								}
								tr { 
									th 'Man. Bestätigung'
									td bitToText(dp.attributes.flags, DataPoint.ATTR_FLAGS_STICKY) 
								}
								tr { 
									th 'Tabellenname'
									td dp.historyTableName 
								}
							}
						}
					}
				}
				if (!dp.historyString) {
					// show trends
					h4 '24h-Trend'
					p {
						img alt:'24h-Trend', src:buildUrl('../query/trend', [dp1:dp.idx], apiKey), 
							width:trendParams.width, height:trendParams.height
					}
					// TODO: CSV export
					h4 'Wochen-Trend'
					p {
						img alt:'Wochen-Trend', src:buildUrl('../query/trend', [dp1:dp.idx, b:'-1W'], apiKey),
							width:trendParams.width, height:trendParams.height
					}
					// TODO: CSV export
				} else {
					// show table
					h4 'Werte der letzten Woche'
					def end=new Date()
					def timeSeries=database.getTimeSeriesRaw(dp, end-7, end)
					def toMany=timeSeries.size()>NUM_STRING_ENTRIES
					if (toMany) {
						timeSeries=timeSeries.takeRight(NUM_STRING_ENTRIES).sort { a, b -> b.timestamp <=> a.timestamp}
					} else {
						timeSeries=timeSeries.iterator().reverse()
					}
					table(class:'table table-bordered table-hover') {
						thead {
							tr {
								th 'Zeitstempel'
								th 'Wert'
								th 'Status'
							}
						}
						tbody {
							timeSeries.each { entry ->
								tr {
									td formatDate(entry.timestamp)
									td entry.value
									td class:'text-right', entry.state
								}
							}
						}
					}
					if (toMany) {
						div(class:'alert alert-warning alert-dismissible', role:'alert') {
							button(type:'button', class:'close', 'data-dismiss':'alert') {
								span { mkp.yieldUnescaped '&times;' }
							}
							span class:'glyphicon glyphicon-exclamation-sign'
							mkp.yield " Zu viele Einträge! Es werden die letzten $NUM_STRING_ENTRIES Einträge angezeigt!"
						}
					}
					// TODO: CSV export
				}
			}
		}
	}	
}

// render page
renderer.render()
