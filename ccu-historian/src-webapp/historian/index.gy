/*
    CCU-Historian, a long term archive for the HomeMatic CCU
    Copyright (C) 2011-2019 MDZ (info@ccu-historian.de)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
import mdz.ccuhistorian.webapp.TrendParameters
import mdz.ccuhistorian.webapp.WebUtilities

// setup page
def renderer=new mdz.ccuhistorian.webapp.PageRenderer(servlet: this)

renderer.head={
	title 'CCU-Historian: Datenpunktliste'
}

renderer.content={
	// parse trend parameters
	def trendParams=TrendParameters.from(request, database, webServer.trendDesigns)

    form(id:'dp-form', action:'trend.gy') {
		// forward other trend parameters
		def forwardParams=trendParams.parameters.findAll { k, vs -> 
			k.startsWith('gh') || (!k.startsWith('dp') && !k.startsWith('g'))
		}
		WebUtilities.buildHiddenInputs(html, forwardParams)
		
		// toolbar
		div(class:'row', style:'margin-bottom: 0.5em') {
			
			// filter input
			div(class:'col-sm-4') {
				div(class:'input-group') {
					String descr='Es wird nach allen Teilen des Filterausdrucks in allen Eigenschaften des ' +
						'Datenpunktes gesucht. Wird ein Suchbegriff in | (Verkettungszeichen) eingeschlossen, ' +
						'so wird nach exakt übereinstimmenden Eigenschaften gesucht. Die gesuchte Eigenschaft ' +
						'darf dann keine Leerzeichen enthalten.'
					div(class:'input-group-addon', 'data-toggle':'tooltip', title:descr) {
						span class:'glyphicon glyphicon-filter'
					}
					input id:'filter-input', type:'text', class:'form-control', disabled:'disabled', 
						placeholder:'Filterausdruck', 'data-toggle':'tooltip', title:descr
				}
			}
			
			div(class:'col-sm-3') {
				div(class:'btn-group', role:'group') {
					// reset filters
					button(id:'reset-filter-btn', class:'btn btn-default', type:'button', 'data-toggle':'tooltip',
						title:'Alle Filter werden gelöscht.') {
						span class:'glyphicon glyphicon-remove'
					}
					// check data points
					button(type:'button', class:'btn btn-default', id:'button-check-visible', 'data-toggle':'tooltip', 
						title:'Alle sichtbaren Datenpunkte werden selektiert.') {
						span class:'glyphicon glyphicon-check'
					}
					// uncheck data points
					button(type:'button', class:'btn btn-default', id:'button-uncheck-visible', 'data-toggle':'tooltip', 
						title:'Alle sichtbaren Datenpunkte werden deselektiert.') {
						span class:'glyphicon glyphicon-unchecked'
					}
					// show only selected 
					button(type:'button', class:'btn btn-default', id:'button-show-selected', 'data-toggle':'tooltip', 
						title:'Nur die selektierten Datenpunkte werden sichtbar geschaltet.') {
						span class:'glyphicon glyphicon-filter'
						span class:'glyphicon glyphicon-check'
					}
				}
			}
			
			// data point actions
			div(class:'col-sm-5 text-right') {
				div(class:'btn-group') {
					button class:'btn btn-default', id:'button-dpdetails', 'data-toggle':'tooltip', 
						title:'Details zu den Datenpunkten anzeigen.', 'Details'
					button class:'btn btn-default', id:'button-dptools', 'data-toggle':'tooltip', 
						title:'Ein Werkzeug auf die Datenpunkte anwenden.', 'Werkzeuge'
					button class:'btn btn-primary', id:'button-trend', style:'width: 8em', 'data-toggle':'tooltip', 
						title:'Die Datenpunkte als Trend anzeigen.', 'Trend'
				}
			}
		}
		
		// selected data points mapped to groups
		def dpToGroup=trendParams.groups.collectMany { groupId, group -> 
			group.dataPoints.collect { dp ->
				[dp.idx, groupId]
			}  
		}.collectEntries()
		
		// data point table
        table(id:'dp-table', class:'table table-bordered table-condensed table-hover') {
            thead {
                tr {
                    th 'Ausw.',
						'data-toggle':'tooltip', title:'Mit den ausgewählten Datenpunkten können verschiedene ' +
						'Aktionen durchgeführt werden.'
                    th class:'hidden-xs hidden-sm', 'Schnittstelle',
						'data-toggle':'tooltip', title:'Über die Schnittstelle wird mit den zugehörigen Geräten kommuniziert.'
                    th 'Gerät / Kanal',
						'data-toggle':'tooltip', title:'Dies ist der Anzeigename des Geräts und/oder des Kanals. Wenn kein ' +
						'Anzeigename bekannt ist, wird die Adresse angezeigt.'
                    th 'Parameter',
						'data-toggle':'tooltip', title:'Ein Kanal kann mehrere Parameter besitzen.'
                    th class:'hidden-xs', 'Raum',
						'data-toggle':'tooltip', title:'Raum des Datenpunktes'
                    th class:'hidden-xs', 'Gewerk',
						'data-toggle':'tooltip', title:'Gewerk oder Funktion des Datenpunktes'
                    th class:'hidden-xs hidden-sm hidden-md', 'Adresse',
						'data-toggle':'tooltip', title:'Bei HomeMatic-Geräten ist der Adressaufbau "Geräteseriennummer:Kanalnummer".'
                    th class:'hidden-xs hidden-sm hidden-md', 'ID',
						'data-toggle':'tooltip', title:'Eindeutige Historian-ID für URL-Parameter bzw. JSON-RPC.'
					if (webServer.config.showLastValue) {
						th class:'hidden-xs hidden-sm', 'Kommunikation',
							'data-toggle':'tooltip', title:'Letzte erfolgreiche Kommunikation'
						th class:'hidden-xs hidden-sm', 
							'Wert', 'data-toggle':'tooltip', title:'Letzter Wert'
					}
                }
            }
            tbody {
                database.dataPoints.findAll { !it.historyHidden }.eachWithIndex { dp, idx ->
                    tr {
						td { 
							def checked=dpToGroup.containsKey(dp.idx)?['checked':'checked']:[:]
							def group=dpToGroup[dp.idx]
							
							input(class:'form-control', type:'checkbox', name:'dp'+(idx+1), 
								value:dp.idx, *:checked)
							// add group, if data point is already selected
							if (group!=null) {
								input(type:'hidden', name:'g'+(idx+1), value:group)
							}
						}
                        td class:'hidden-xs hidden-sm', dp.id.interfaceId
                        td dp.attributes.displayName?:dp.id.address
                        td dp.id.identifier
                        td class:'hidden-xs', dp.attributes.room
                        td class:'hidden-xs', dp.attributes.function
                        td class:'hidden-xs hidden-sm hidden-md', dp.id.address
                        td class:'hidden-xs hidden-sm hidden-md text-right', dp.idx
						if (webServer.config.showLastValue) {
							def last=database.getLast(dp)
							td class:'hidden-xs hidden-sm', utils.format(last?.timestamp)
							td class:'hidden-xs hidden-sm text-right', utils.format(last?.value)
						}
                    }
                }
            }
        }
    }
}

renderer.end={
    script { mkp.yieldUnescaped($/
		// auto sizing of trend graphics
	    if ($('#dp-form > input[name="w"]').length==0) {
			const vw=Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);
			const vh=Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);
			const tw=Math.max(640, vw-64);
			const th=Math.max(240, vh-240);
			$('#dp-form').prepend('<input type="hidden" name="w" value="'+tw+'"/><input type="hidden" name="h" value="'+th+'"/>');
	    }
		
		// select data point also by clicking on row
		$('#dp-table tbody tr').on('click', function(e) {
			// clicked on checkbox? then do nothing
			if ($(e.target).is('input')) return;
			// simulate click on checkbox
			$(this).find('input').trigger('click');
		});
		
		// reset filter
		$('#reset-filter-btn').on('click', function(e) {
			$('#filter-input').val('');
			$('#dp-table tbody tr').css('display', '');
		});
		
		// filter
		var filter=function(e) {
			var terms=$(this).val().toLowerCase().split(/\s+/);
			$('#dp-table tbody tr').each(function() {
				// | separated cell contents
				var content='|'+$(this).children('td').slice(1).map(function() { 
					return $(this).text() }).get().join('|').toLowerCase()+'|';
				if (terms.every(t => content.indexOf(t) >= 0))
					$(this).css('display', '');
				else 
					$(this).css('display', 'none');
			});
		};
		$('#filter-input').on('keyup', _.debounce(filter, 500));
		// enable filter
		$('#filter-input').prop('disabled', false);
		
		// check/uncheck visible data points
		$('#button-check-visible').on('click', function(e) {
			$('#dp-table tbody > tr:visible td:first-child > input:enabled').prop('checked', true);
		});
		$('#button-uncheck-visible').on('click', function(e) {
			$('#dp-table tbody > tr:visible td:first-child > input').prop('checked', false);
		});
		
		// show only selected
		$('#button-show-selected').on('click', function(e) {
			$('#filter-input').val('');
			$('#dp-table tbody tr').each(function() {
				var selected=$(this).find('td:first-child > input').is(':checked');
				if (selected)
					$(this).css('display', '');
				else 
					$(this).css('display', 'none');
			});
		});
		
		// show data point details
		$('#button-dpdetails').on('click', function(e) {
			var f=$('#dp-form');
			f.attr('action', 'dpdetails.gy');
			f.submit();
		});
		// show data point tools
		$('#button-dptools').on('click', function(e) {
			var f=$('#dp-form');
			f.attr('action', 'dptools.gy');
			f.submit();
		});
		// show trend
		$('#button-trend').on('click', function(e) {
			var f=$('#dp-form');
			f.attr('action', 'trend.gy');
			f.submit();
		});
	/$) }
}

// render page
renderer.render()
