import mdz.ccuhistorian.webapp.TrendParameters
import mdz.ccuhistorian.webapp.WebUtilities

// setup page
def renderer=new mdz.ccuhistorian.webapp.PageRenderer(servlet: this)

renderer.head={
	title 'CCU-historian: Datenpunktliste'
}

renderer.content={
	// parse trend parameters
	def trendParams=new TrendParameters(request, database, webServer.config.trendDesigns)

    form(id:'dp-form', action:'trend.gy') {
		// forward other trend parameters
		def forwardParams=trendParams.parameters.findAll { k, vs -> 
			k.startsWith('gh') || (!k.startsWith('dp') && !k.startsWith('g'))
		}
		WebUtilities.buildHiddenInputs(html, forwardParams)
		
		// toolbar
		div(class:'row', style:'margin-bottom: 0.5em') {
			
			// filter input
			div(class:'col-sm-4') {
				div(class:'input-group') {
					div(class:'input-group-addon') {
						span class:'glyphicon glyphicon-filter'
					}
					input id:'filter-input', type:'text', class:'form-control', placeholder:'Filterausdruck'
					span(class:'input-group-btn') {
						button(id:'reset-filter-btn', class:'btn btn-default', type:'button') {
							span class:'glyphicon glyphicon-remove'
						}
					}
				}
			}
			
			div(class:'col-sm-3') {
				div(class:'btn-group', role:'group') {
					// check/uncheck buttons
					button(type:'button', class:'btn btn-default', id:'button-check-visible') {
						span class:'glyphicon glyphicon-check'
					}
					button(type:'button', class:'btn btn-default', id:'button-uncheck-visible') {
						span class:'glyphicon glyphicon-unchecked'
					}
					// show only selected 
					button(type:'button', class:'btn btn-default', id:'button-show-selected') {
						span class:'glyphicon glyphicon-filter'
						span class:'glyphicon glyphicon-check'
					}
				}
			}
			
			// data point actions
			div(class:'col-sm-5 text-right') {
				div(class:'btn-group') {
					button class:'btn btn-default', id:'button-dpdetails', 'Details'
					button class:'btn btn-default', id:'button-dptools', 'Werkzeuge'
					button class:'btn btn-primary', id:'button-trend', style:'width: 8em', 'Trend'
				}
			}
		}
		
		// selected data points mapped to groups
		def dpToGroup=trendParams.groups.collectMany { groupId, group -> 
			group.dataPoints.collect { dp ->
				[dp.idx, groupId]
			}  
		}.collectEntries()
		
		// data point table
        table(id:'dp-table', class:'table table-bordered table-hover') {
            thead {
                tr {
                    th 'Ausw.'
                    th class:'hidden-xs hidden-sm', 'Schnittstelle'
                    th 'Kanal'
                    th 'Parameter'
                    th class:'hidden-xs', 'Raum'
                    th class:'hidden-xs', 'Gewerk'
                    th class:'hidden-xs hidden-sm hidden-md', 'Adresse'
                }
            }
            tbody {
                database.dataPoints.findAll { !it.historyHidden }.eachWithIndex { dp, idx ->
                    tr {
						td { 
							def checked=dpToGroup.containsKey(dp.idx)?['checked':'checked']:[:]
							def group=dpToGroup[dp.idx]
							
							input(class:'form-control', type:'checkbox', name:'dp'+(idx+1), 
								value:dp.idx, *:checked)
							// add group, if data point is already selected
							if (group!=null) {
								input(type:'hidden', name:'g'+(idx+1), value:group)
							}
						}
                        td class:'hidden-xs hidden-sm', dp.id.interfaceId
                        td dp.attributes.displayName?:dp.id.address
                        td dp.id.identifier
                        td class:'hidden-xs', dp.attributes.room
                        td class:'hidden-xs', dp.attributes.function
                        td class:'hidden-xs hidden-sm hidden-md', dp.id.address
                    }
                }
            }
        }
    }
}

renderer.end={
    script { mkp.yieldUnescaped($/
		// select data point also by clicking on row
		$('#dp-table tbody tr').on('click', function(e) {
			// clicked on checkbox? then do nothing
			if ($(e.target).is('input')) return;
			// simulate click on checkbox
			$(this).find('input').trigger('click');
		});
		
		// reset filter
		$('#reset-filter-btn').on('click', function(e) {
			$('#filter-input').val('');
			$('#dp-table tbody tr').css('display', '');
		});
		
		// filter
		var filter=function(e) {
			var terms=$(this).val().toLowerCase().split(/\s+/);
			$('#dp-table tbody tr').each(function() {
				var val=$(this).children('td').text().toLowerCase();
				if (terms.every(t => val.indexOf(t) >= 0))
					$(this).css('display', '');
				else 
					$(this).css('display', 'none');
			});
		};
		$('#filter-input').on('keyup', _.debounce(filter, 500));
		
		// check/uncheck visible data points
		$('#button-check-visible').on('click', function(e) {
			$('#dp-table tbody > tr:visible td:first-child > input:enabled').prop('checked', true);
		});
		$('#button-uncheck-visible').on('click', function(e) {
			$('#dp-table tbody > tr:visible td:first-child > input').prop('checked', false);
		});
		
		// show only selected
		$('#button-show-selected').on('click', function(e) {
			$('#filter-input').val('');
			$('#dp-table tbody tr').each(function() {
				var selected=$(this).find('td:first-child > input').is(':checked');
				if (selected)
					$(this).css('display', '');
				else 
					$(this).css('display', 'none');
			});
		});
		
		// show data point details
		$('#button-dpdetails').on('click', function(e) {
			var f=$('#dp-form');
			f.attr('action', 'dpdetails.gy');
			f.submit();
		});
		// show data point tools
		$('#button-dptools').on('click', function(e) {
			var f=$('#dp-form');
			f.attr('action', 'dptools.gy');
			f.submit();
		});
		// show trend
		$('#button-trend').on('click', function(e) {
			var f=$('#dp-form');
			f.attr('action', 'trend.gy');
			f.submit();
		});
	/$) }
}

// render page
renderer.render()
