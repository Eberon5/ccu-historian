/*
    CCU-Historian, a long term archive for the HomeMatic CCU
    Copyright (C) 2011-2019 MDZ (info@ccu-historian.de)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
import groovy.transform.Field
import java.util.logging.Logger

@Field
private final static Logger log = Logger.getLogger('mdz.ccuhistorian.webapp.Script')

// get api key
def apiKey
if (webServer.config.apiKeys) {
	apiKey="?k="+webServer.config.apiKeys[0]
} else {
	apiKey=""
}

// *** css ***
def css=$/
.textpane {
	resize: vertical;
	font-family: Menlo, Monaco, Consolas, "Courier New", monospace;
	font-size: 13px;
	color: black;
}
/$

// *** javascript ***
def js=$/

// api key (transfer from groovy variable)
var apiKey="$apiKey"

// global state
var scriptOutput=""
var scriptError=false
var scriptRunning=false

// script pane component
function ScriptPane(initialVnode) {
	// model
	var script='println "Datenpunktliste:"\n'+
		'database.dataPoints.each { dp ->\n'+
  		'    println dp.displayName\n'+
		'}'
	var writeAccess=false

	// control
	function onScript(e) {
		script=e.target.value
	}
	function onWriteAccess(e) {
		writeAccess=e.target.checked
	}
	function onRun() {
		scriptOutput="Skript wird ausgeführt! Bitte warten!"
		scriptError=false
		scriptRunning=true
		m.request({
			method:"POST",
			url: "/query/jsonrpc.gy"+apiKey,
			data: {
				method: 'executeScript',
				params: [script, writeAccess],
			},
			deserialize: function(response) {
				// only try to parse json. return the string unchanged if an error occurs.
				try {response=response?JSON.parse(response):null} catch (e) {}
				return response
			},
		}).then(function(data) {
			if (data.error!==undefined) {
				scriptError=true
				scriptOutput="Bei der Skriptausführung ist ein Fehler aufgetreten:\n"+data.error.message
			} else {
				scriptError=false
				scriptOutput=data.result
			}
			scriptRunning=false
		}, function(err) {
			scriptError=true
			scriptOutput="Bei dem JSON-RPC-Aufruf ist ein Fehler aufgetreten:\n"+err.message
			scriptRunning=false
		})
	}

	return {
		view: function() {
			return m("div",
				m("h4", "Skript"),
				m(".row",
					m(".col-xs-7",
						m(".checkbox", 
							m("label",
								m("input[type=checkbox]", {onchange: onWriteAccess}),
								"Schreibzugriff auf Datenbank ",
								m("span.glyphicon.glyphicon-alert")
							),
						),
					),
					m(".col-xs-5",
						m("button.btn.btn-primary.btn-block", 
							{onclick: onRun, disabled: scriptRunning?"disabled":null}, 
							"Ausführen")
					)
				),
				m("textarea.form-control.textpane[rows=25][placeholder=Skript]", {oninput: onScript}, script)
			)
		}
	}
}

// output pane component
function OutputPane(initialVnode) {
	return {
		view: function() {
			return m("div",
				m("h4", "Ausgabe"),
				m("textarea.form-control.textpane[rows=27][readonly]", 
					scriptError?{style: "background-color:#ff6262"}:null, 
					scriptOutput
				)
			)
		}
	}
}

// mount components
m.mount(document.getElementById("scriptPane"), ScriptPane)
m.mount(document.getElementById("outputPane"), OutputPane)
/$

// setup page
def renderer=new mdz.ccuhistorian.webapp.PageRenderer(servlet: this)

renderer.head={
	title 'CCU-historian: Skriptumgebung'
	style { mkp.yieldUnescaped css }
}

renderer.content={
	// backup warning
	div(class:'alert alert-warning', role:'alert') {
		span class:'glyphicon glyphicon-exclamation-sign'
		mkp.yield ' Mit dieser Funktion können Daten unwiderruflich gelöscht werden! Es sollte immer vorab eine Sicherungskopie der '
		mkp.yield 'Datenbank erstellt werden.'
	}
	
	// content is rendered by mithril
	div id:'scriptPane', class:'col-md-6'
	div id:'outputPane', class:'col-md-6'
}


renderer.end={
	script src:'/external/mithril/mithril.js'
    script { mkp.yieldUnescaped js }
}

// render page
renderer.render()
